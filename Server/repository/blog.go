package repository

import (
	"database/sql"

	"github.com/SusanEnneking/angryoldshedev/server/model"
)

// BlogRepo implements models.BlogRepository
type BlogRepo struct {
	db *sql.DB
}

// NewBlogRepo ..
func NewBlogRepo(db *sql.DB) *BlogRepo {
	return &BlogRepo{
		db: db,
	}
}

func (r *BlogRepo) GetAll() ([]*model.Blog, error) {
	var blogs []*model.Blog
	query := `SELECT blog.id as id, body_id, auto_generated, topic, title, question_posed_to_open_ai, 
		blog.created_date as created_date, blog.created_by as created_by, blog.is_active as is_active,
		category.category as category
		FROM blog
		JOIN category
		ON blog.category_id = category.id`
	rows, error := r.db.Query(query)
	if error != nil {
		return nil, error
	}

	for rows.Next() {
		blog := model.Blog{}
		error = rows.Scan(&blog.Id, &blog.BodyId, &blog.Autogenerated, &blog.Topic, &blog.Title, &blog.QuestionPosedToOpenAi, &blog.CreatedOn,
			&blog.CreatedBy, &blog.Active, &blog.Category,
		)
		if error != nil {
			return nil, error
		}
		blogs = append(blogs, &blog)
	}
	return blogs, nil
}

func (r *BlogRepo) Categories() ([]string, error) {
	categories := []string{}
	query := `SELECT category
		FROM category
		WHERE is_active = 1`
	rows, error := r.db.Query(query)
	if error != nil {
		return nil, error
	}
	var category string
	for rows.Next() {
		error = rows.Scan(&category)
		if error != nil {
			return nil, error
		}
		categories = append(categories, category)
	}
	return categories, nil
}

func (r *BlogRepo) Save(blog *model.Blog) error {
	return nil
}

func (r *BlogRepo) Close() {
	r.db.Close()
}
