package repository

import (
	"database/sql"
	"log"
	"testing"
	"time"

	m "github.com/SusanEnneking/angryoldshedev/server/model"

	"github.com/DATA-DOG/go-sqlmock"
	"github.com/stretchr/testify/assert"
)

var b = &m.Blog{
	Id:                    1,
	BodyId:                1,
	Autogenerated:         true,
	Topic:                 "something silly",
	Title:                 "A good silly title",
	QuestionPosedToOpenAi: "some well worded question",
	CreatedOn:             time.Now(),
	CreatedBy:             "testing",
	Active:                true,
	Category:              "Technical",
}

var c = "a category"

func NewMock() (*sql.DB, sqlmock.Sqlmock) {
	db, mock, err := sqlmock.New()
	if err != nil {
		log.Fatalf("an error '%s' was not expected when opening a stub database connection", err)
	}

	return db, mock
}
func TestBlogGetAll(t *testing.T) {
	db, mock := NewMock()
	repo := NewBlogRepo(db)
	defer func() {
		repo.Close()
	}()
	query := `SELECT blog.id as id, body_id, auto_generated, topic, title, question_posed_to_open_ai, 
				blog.created_date as created_date, blog.created_by as created_by, blog.is_active as is_active,
				category.category as category, blog.image_url, blog.image_text, blog_body.body as body
				FROM blog
				JOIN category
				ON blog.category_id = category.id
				JOIN blog_body
				ON blog.body_id = blog_body.id`
	rows := sqlmock.NewRows([]string{"id", "body_id", "auto_generated", "topic", "title", "question_posed_to_open_ai", "created_date", "created_by", "is_active", "category", "image_url", "image_text", "body"}).
		AddRow(b.Id, b.BodyId, b.Autogenerated, b.Topic, b.Title, b.QuestionPosedToOpenAi, b.CreatedOn, b.CreatedBy, b.Active, b.Category, b.ImageUrl, b.ImageText, b.Body)
	mock.ExpectQuery(query).WithArgs().WillReturnRows(rows)
	blog, err := repo.GetAll()
	assert.NotNil(t, blog)
	assert.NoError(t, err)
}

func TestCategories(t *testing.T) {
	db, mock := NewMock()
	repo := NewBlogRepo(db)
	defer func() {
		repo.Close()
	}()
	query := `SELECT category
			FROM category
			WHERE is_active = 1`
	rows := sqlmock.NewRows([]string{"category"}).
		AddRow(c)
	mock.ExpectQuery(query).WithArgs().WillReturnRows(rows)
	blog, err := repo.Categories()
	assert.NotNil(t, blog)
	assert.NoError(t, err)
}
